Cuida_plus - Instruções de Configuração e Uso
=============================================

1. Ativar o ambiente virtual
----------------------------
    Sempre que for trabalhar no projeto, abra o terminal (PowerShell ou CMD) dentro da pasta do projeto CuidaPlus e rode:

    # PowerShell
        .\venv\Scripts\Activate.ps1

    # CMD
        # .\venv\Scripts\activate.bat

    > Isso ativa o ambiente virtual do Python, garantindo que todas as bibliotecas usadas pelo projeto funcionem corretamente.

---

2. Instalar dependências
------------------------
    Após ativar o ambiente virtual, instale todas as bibliotecas necessárias rodando no terminal:

        pip install -r requirements.txt

    > Esse comando lê o arquivo `requirements.txt` e instala todas as bibliotecas do projeto, incluindo:
        > - mysql-connector-python (conexão com banco MySQL)
        > - pandas (manipulação de dados e relatórios)
        > - Tkinter (interface gráfica, já vem com Python no Windows, mas mencionado para referência)
        >
    > Sempre rode este comando no terminal **com o ambiente virtual ativado**.


---

3. Estrutura de Pastas e Arquivos
---------------------------------
    /app
        main.py           -> Arquivo principal que inicializa a aplicação Tkinter
        database.py       -> Conexão e funções do MySQL
        models.py         -> Classes do sistema (Paciente, Atendimento, Sugestao, etc.)
        /ui
            login.py      -> Tela de login
            paciente.py   -> Tela de paciente
            coordenacao.py-> Tela de coordenacao hospitalar
    /assets              -> Imagens e ícones
    README.md            -> Descrição do projeto
    requirements.txt     -> Lista de dependências do projeto

    > Nunca altere a estrutura das pastas, e coloque arquivos novos nas pastas corretas.

---

4. Comandos Git básicos
-----------------------
    Após iniciar o trabalho no projeto, siga sempre esta sequência para garantir que você está atualizado e evita conflitos:

    1. **Atualizar o repositório local com alterações do GitHub**  
    git pull origin main  
        > Sempre rode este comando **antes de começar qualquer alteração**. Ele traz todas as mudanças que outros colegas possam ter feito para sua máquina, evitando conflitos.

    2. **Verificar status dos arquivos**  
    git status  
        > Mostra quais arquivos foram modificados ou adicionados.

    3. **Adicionar arquivos modificados para commit**  
    git add .  
        > Seleciona todos os arquivos que você mexeu para serem enviados ao commit.

    4. **Criar um commit com mensagem explicativa**  
    git commit -m "Mensagem descrevendo a alteração"  
        > Sempre use uma mensagem clara e objetiva, ex: "Adiciona tela de cadastro de pacientes".

    5. **Enviar as alterações para o GitHub**  
    git push origin main  
        > Isso envia suas alterações para o repositório remoto no GitHub.

    > **Resumo da ordem correta**:  
        > 1️⃣ `git pull origin main` (atualiza o projeto)  
        > 2️⃣ `git add .` (seleciona alterações)  
        > 3️⃣ `git commit -m "mensagem"` (cria commit)  
        > 4️⃣ `git push origin main` (envia para o GitHub)  

    Seguindo essa ordem, você garante que sempre estará trabalhando com a versão mais atualizada e evita conflitos no repositório.

---

5. Dicas importantes
--------------------
    - Sempre ative o ambiente virtual antes de rodar qualquer código Python.  
    - Não modifique arquivos de colegas sem combinar antes.  
    - Use mensagens de commit claras e descritivas.  
    - Mantenha a estrutura de pastas organizada.
